version: 2.1

orbs:
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0

jobs:
  build:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: Install project dependencies
          command: |
            python3 -m venv udacity
            . udacity/bin/activate
            make install
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            . udacity/bin/activate
            make lint
      - save_cache:
          paths:
            - ./udacity
          key: v1-dependencies{{ checksum "requirements.txt" }}

  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
              | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''

  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services && sleep 50
          name: Test cluster

  create-docker-build:
    machine: true
    steps:
      - checkout
      - run:
          name: Build docker container and send to dockerhub
          no_output_timeout: 30m
          command: |
            ./upload_docker.sh ${DOCKER_USER} ${DOCKER_PASS}

  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/udacity-capstone-app

workflows:
  deployment:
    jobs:
      - build
      # - create-cluster:
      #     cluster-name: udacity-capstone
      #     requires:
      #       - build
      # - test-cluster:
      #     cluster-name: udacity-capstone
      #     requires:
      #       - create-cluster
      - create-docker-build
      - create-deployment:
          cluster-name: udacity-capstone
          requires:
            - create-docker-build
            # - test-cluster
      - aws-eks/update-container-image:
          cluster-name: udacity-capstone
          container-image-updates: udacity-capstone-app=izzyandrade/udacity-capstone:latest
          post-steps:
            - kubernetes/delete-resource:
                resource-names: udacity-capstone-app
                resource-types: deployment
                wait: true
          record: true
          requires:
            - create-deployment
            - create-docker-build
          resource-name: deployment/udacity-capstone-app
